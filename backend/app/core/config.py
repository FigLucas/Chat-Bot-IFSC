import os  # Biblioteca para interagir com o sistema operacional (vari√°veis de ambiente, caminhos, etc.)
from typing import List  # Para indicar tipos de listas
import logging  # Para registrar logs do sistema

# Cria um logger espec√≠fico para este m√≥dulo
logger = logging.getLogger(__name__)

class Settings:
    """
    Classe de configura√ß√µes que l√™ vari√°veis de ambiente e mant√©m tudo organizado.
    """

    def __init__(self):
        # Loga que estamos carregando as configura√ß√µes
        logger.info("üîß Carregando configura√ß√µes...")

        # -----------------------------
        # Configura√ß√£o de CORS
        # -----------------------------
        # Pega a vari√°vel CORS_ORIGINS do .env ou usa valor padr√£o
        cors_origins_str = os.getenv(
            "CORS_ORIGINS",
            "http://localhost:3000"
        )
        # Converte a string separada por v√≠rgula em uma lista e remove espa√ßos extras
        self.cors_origins: List[str] = [origin.strip() for origin in cors_origins_str.split(',')]

        # -----------------------------
        # Configura√ß√µes do JWT
        # -----------------------------
        # Chave secreta para assinar tokens JWT
        self.jwt_secret_key: str = os.getenv(
            "JWT_SECRET_KEY", 
            "a_very_secret_key_that_should_be_in_env"
        )
        # Algoritmo usado para assinar os tokens
        self.jwt_algorithm: str = os.getenv("JWT_ALGORITHM", "HS256")
        # Tempo de expira√ß√£o dos tokens JWT em minutos
        self.jwt_access_token_expire_minutes: int = int(os.getenv("JWT_ACCESS_TOKEN_EXPIRE_MINUTES", 30))

        # -----------------------------
        # Senha do admin
        # -----------------------------
        # Pega a senha do admin do .env e remove espa√ßos extras
        self.admin_password: str = os.getenv("ADMIN_PASSWORD", "change_this_password").strip()



# -----------------------------
# Singleton para configura√ß√µes
# -----------------------------
# Mant√©m uma inst√¢ncia √∫nica de Settings para o sistema inteiro
_settings = None

def get_settings() -> Settings:
    """
    Retorna a inst√¢ncia singleton das configura√ß√µes.

    - Se j√° existir, retorna a mesma inst√¢ncia.
    - Se n√£o existir, cria uma nova inst√¢ncia de Settings.
    """
    global _settings
    if _settings is None:
        _settings = Settings()  # Cria a inst√¢ncia pela primeira vez
    return _settings  # Retorna a inst√¢ncia existente
