"""
Depend√™ncias compartilhadas da aplica√ß√£o.
Fornece inst√¢ncia global do ChatService, inicializa√ß√£o ass√≠ncrona e status do servi√ßo.
"""

# -----------------------------
# Importa√ß√µes necess√°rias
# -----------------------------
from .services.chat_service import ChatService
import logging
import asyncio

# -----------------------------
# Logger do m√≥dulo
# -----------------------------
logger = logging.getLogger(__name__)

# -----------------------------
# Vari√°veis globais para o ChatService
# -----------------------------
_chat_service: ChatService = None  # Inst√¢ncia global do ChatService
_initialization_lock = asyncio.Lock()  # Lock para evitar inicializa√ß√£o simult√¢nea

# -----------------------------
# Fun√ß√£o para inicializar o ChatService globalmente
# -----------------------------
async def initialize_chat_service():
    """
    Inicializa o servi√ßo de chat globalmente.
    
    - Garante que apenas uma inicializa√ß√£o aconte√ßa por vez usando lock ass√≠ncrono.
    - Cria inst√¢ncia de ChatService e chama m√©todo initialize().
    """
    global _chat_service
    
    async with _initialization_lock:
        # Se j√° inicializado, apenas retorna
        if _chat_service and _chat_service.is_initialized:
            logger.info("‚úÖ ChatService j√° inicializado")
            return
        
        logger.info("üöÄ Inicializando sistema IFSC Chat...")
        _chat_service = ChatService()      # Cria inst√¢ncia
        await _chat_service.initialize()   # Inicializa ass√≠ncronamente
        logger.info("‚úÖ Sistema inicializado com sucesso!")

# -----------------------------
# Fun√ß√£o para obter a inst√¢ncia do ChatService
# -----------------------------
async def get_chat_service() -> ChatService:
    """
    Depend√™ncia para obter o ChatService inicializado.
    
    - Se o servi√ßo ainda n√£o estiver inicializado, inicializa automaticamente.
    - Retorna a inst√¢ncia global do ChatService.
    """
    global _chat_service
    
    if _chat_service is None:
        logger.info("üîÑ Inicializando ChatService...")
        await initialize_chat_service()
    
    return _chat_service

# -----------------------------
# Fun√ß√£o para obter o status do ChatService
# -----------------------------
def get_chat_service_status() -> dict:
    """
    Retorna o status do servi√ßo de chat.
    
    Keys:
        - initialized: True se ChatService foi inicializado
        - service_available: True se a inst√¢ncia do ChatService existe
    """
    global _chat_service
    return {
        "initialized": _chat_service.is_initialized if _chat_service else False,
        "service_available": _chat_service is not None
    }
