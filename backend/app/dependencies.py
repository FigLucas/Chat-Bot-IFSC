"""
Depend√™ncias compartilhadas da aplica√ß√£o
"""
from fastapi import HTTPException
from .services.chat_service import ChatService
import logging
import asyncio

logger = logging.getLogger(__name__)

# Inst√¢ncia global do servi√ßo de chat
_chat_service: ChatService = None
_initialization_lock = asyncio.Lock()

async def initialize_chat_service():
    """Inicializa o servi√ßo de chat globalmente"""
    global _chat_service
    
    async with _initialization_lock:
        if _chat_service and _chat_service.is_initialized:
            logger.info("‚úÖ ChatService j√° inicializado")
            return
            
        try:
            logger.info("üöÄ Inicializando sistema IFSC Chat...")
            _chat_service = ChatService()
            await _chat_service.initialize()
            logger.info("‚úÖ Sistema inicializado com sucesso!")
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar sistema: {e}")
            # Criar inst√¢ncia mesmo com erro para funcionar em modo limitado
            if not _chat_service:
                _chat_service = ChatService()
                # For√ßar inicializa√ß√£o em modo mock
                _chat_service.is_initialized = True
                _chat_service.qa_chain = _chat_service._create_mock_system()
                logger.warning("‚ö†Ô∏è Sistema inicializado em modo MOCK devido a erro")

async def get_chat_service() -> ChatService:
    """Depend√™ncia para obter o servi√ßo de chat inicializado"""
    global _chat_service
    
    if _chat_service is None:
        logger.info("üîÑ Inicializando ChatService...")
        _chat_service = ChatService()
        await _chat_service.initialize()
        logger.info("‚úÖ ChatService inicializado com sucesso!")
    
    return _chat_service

def get_chat_service_status() -> dict:
    """Obt√©m o status do servi√ßo de chat"""
    global _chat_service
    return {
        "initialized": _chat_service.is_initialized if _chat_service else False,
        "service_available": _chat_service is not None
    }